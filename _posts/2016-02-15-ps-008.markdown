---
layout: post
title:  "[LeetCode] LRU Cache (1)"
date:   2016-02-15 17:27:00
categories: algorithm
author: Rachel Park
comments: true
tags: [ps]
permalink: ps/008
---


<a href='https://leetcode.com/problems/lru-cache/'>LRU Cache</a>
<br/><br/>

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
<br/>
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.



<a href='https://github.com/mjpark03/leetcode/blob/master/lru-cache.java'>My Solution (Github)</a>
{% highlight text %}
import java.util.*;;

public class LRUCache {
    
    private final int capacity;
    private HashMap lruCache;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.lruCache = new LinkedHashMap<Integer, Integer>(capacity, 0.75f, true) {
        protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
            return size() > LRUCache.this.capacity;
        }
      };
    }
    
    public int get(int key) {
        if (lruCache.containsKey(key)) {
            return (Integer)lruCache.get(key);
        } else {
            return -1;
        }
    }
    
    public void set(int key, int value) {
       lruCache.put(key, value);
    }
}
{% endhighlight %}

<!-- more -->

<br/><br/>

