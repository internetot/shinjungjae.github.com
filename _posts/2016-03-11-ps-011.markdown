---
layout: post
title:  "[LeetCode] Valid Parentheses (1)"
date:   2016-03-11 23:00:00
categories: algorithm
author: Rachel Park
comments: true
tags: [ps]
permalink: ps/011
---


<a href='https://leetcode.com/problems/valid-parentheses/'>Valid Parentheses</a>
<br/><br/>

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.



<a href='https://github.com/mjpark03/leetcode/blob/master/valid-parentheses.java'>My Solution (Github)</a>
{% highlight text %}
import java.util.Stack;

public class Solution {

    public boolean isValid(String s) {
        Stack<Character> stack = new Stack();

        if(!(s.length()%2==0)) return false;

        for(int i=0; i<s.length(); i++) {
            char ch = s.charAt(i);

            if( ch=='}' || ch==')' || ch==']') {
                if(stack.empty()) return false;

                char openCh = stack.pop();
                if( !((ch=='}' && openCh=='{') || (ch==')' && openCh=='(') || (ch==']' && openCh=='[')) )
                    return false;
            } else {
                stack.push(ch);
            }
        }

        if(stack.empty())
            return true;
        else
            return false;
    }
}
{% endhighlight %}

<!-- more -->

<br/><br/>
* Time Complexity: O(n)
