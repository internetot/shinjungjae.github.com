---
layout: post
title:  "[LeetCode] Binary Tree Level Order Traversal (1)"
date:   2015-09-28 15:26:00
categories: algorithm
author: Rachel Park
comments: true
tags: [ps]
permalink: ps/001
---


<a href='https://leetcode.com/problems/binary-tree-level-order-traversal/'>Problem Link</a>
<br/><br/>

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level)

For example:
Given binary tree {3,9,20,#,#,15,7},

return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
<br/><br/>

<a href='https://github.com/mjpark03/leetcode/blob/master/binary-tree-level-order-traversal.java'>My Solution (Github)</a>
{% highlight text %}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


public class Solution {
    private List<List<Integer>> levelOrderList = new ArrayList<List<Integer>>();
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        performLevelOrder(root, 0);
        return levelOrderList;
    }
    
    private void performLevelOrder(TreeNode node, int level) {
        
        if(node==null) {
            return;
        }
        
        if(levelOrderList.size()<=level) {
            List<Integer> tmpList = new ArrayList<Integer>();
            tmpList.add(node.val);
            levelOrderList.add(tmpList);
        } else {
            levelOrderList.get(level).add(node.val);
        }
        
        performLevelOrder(node.left, level+1);
        performLevelOrder(node.right, level+1);
        
        return;
    }
}
{% endhighlight %}

<!-- more -->

