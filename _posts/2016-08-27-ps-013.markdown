---
layout: post
title:  "[ACM-ICPC] 4963 - 섬의 개수"
date:   2016-08-26 20:00:00
categories: algorithm
author: Rachel Park
comments: true
tags: [ps]
permalink: ps/013
---


<a href='https://www.acmicpc.net/problem/4963'>4963 - 섬의 개수</a>
<br/><br/>

정사각형으로 이루어져 있는 섬과 바다 지도가 주어진다. 섬의 개수를 세는 프로그램을 작성하시오.

Given the map consists of the island and the ocean, write the program to count the number of the island.



<a href='https://github.com/mjpark03/acmicpc/blob/master/src/IslandNumber.java'>My Solution (Github)</a>
{% highlight text %}
import java.util.Scanner;

public class Main {
 
    static final int MAX = 51;
 
    static int[][] map = new int[MAX][MAX];
    static int[][] visited = new int[MAX][MAX];
 
    static int w, h;
 
    public static void main(String[] args) {
        int count = 0;
 
        Scanner scan = new Scanner(System.in);
 
        while(true) {
 
            count = 0;
            String xyLine = scan.nextLine();
            w = Integer.parseInt(xyLine.split(" ")[0]);
            h = Integer.parseInt(xyLine.split(" ")[1]);
 
            if( w == 0 && h == 0 )
                break;
 
            for(int i=1; i<=w; i++) {
                for(int j=1; j<=h; j++) {
                    visited[i][j] = 0;
                    map[i][j] = 0;
                }
            }
 
            for(int i=1; i<=h; i++) {
                String mapLine = scan.nextLine();
                String[] mapParsing = mapLine.split(" ");
 
                for(int j=1; j<=w; j++) {
                    map[j][i] = Integer.parseInt(mapParsing[j-1]);
                }
            }
 
            for(int i=1; i<=w; i++) {
                for (int j=1; j<=h; j++) {
 
                    if (visited[i][j] == 0 && map[i][j] == 1) {
                        dfs(i, j);
                        count++;
                    }
                }
            }
 
            System.out.println(count);
        }
    }
 
    public static void dfs(int x, int y) {
 
        visited[x][y] = 1;
 
        for(int i=-1; i<=1; i++) {
            for(int j=-1; j<=1; j++) {
                if(x+i>=1 && x+i<=w && y+j>=1 && y+j<=h) {
                    if(visited[x+i][y+j] == 0 && map[x+i][y+j] == 1) {
                        dfs(x+i, y+j);
                    }
                }
            }
        }
    }
}
{% endhighlight %}

<!-- more -->

<br/><br/>
* Using DFS(Depth First Search) Graph Algorithm

